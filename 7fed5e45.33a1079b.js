(window.webpackJsonp=window.webpackJsonp||[]).push([[362],{420:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return b})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return d}));var r=a(1),n=a(6),c=(a(0),a(803)),b={id:"commitordercalculator",title:"Class: CommitOrderCalculator",sidebar_label:"CommitOrderCalculator"},o={unversionedId:"api/classes/commitordercalculator",id:"api/classes/commitordercalculator",isDocsHomePage:!1,title:"Class: CommitOrderCalculator",description:"CommitOrderCalculator implements topological sorting, which is an ordering",source:"@site/docs/api/classes/commitordercalculator.md",slug:"/api/classes/commitordercalculator",permalink:"/docs/next/api/classes/commitordercalculator",editUrl:"https://github.com/mikro-orm/mikro-orm/edit/master/docs/docs/api/classes/commitordercalculator.md",version:"current",sidebar_label:"CommitOrderCalculator",sidebar:"API",previous:{title:"Class: Collection<T, O>",permalink:"/docs/next/api/classes/collection"},next:{title:"Class: Configuration<D>",permalink:"/docs/next/api/classes/configuration"}},i=[{value:"Hierarchy",id:"hierarchy",children:[]},{value:"Properties",id:"properties",children:[{value:"nodes",id:"nodes",children:[]},{value:"sortedNodeList",id:"sortednodelist",children:[]}]},{value:"Methods",id:"methods",children:[{value:"addDependency",id:"adddependency",children:[]},{value:"addNode",id:"addnode",children:[]},{value:"hasNode",id:"hasnode",children:[]},{value:"sort",id:"sort",children:[]},{value:"visit",id:"visit",children:[]},{value:"visitOpenNode",id:"visitopennode",children:[]}]}],l={rightToc:i};function d(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"CommitOrderCalculator implements topological sorting, which is an ordering\nalgorithm for directed graphs (DG) and/or directed acyclic graphs (DAG) by\nusing a depth-first searching (DFS) to traverse the graph built in memory.\nThis algorithm have a linear running time based on nodes (V) and dependency\nbetween the nodes (E), resulting in a computational complexity of O(V + E)."),Object(c.b)("p",null,"Based on ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/doctrine/orm/blob/master/lib/Doctrine/ORM/Internal/CommitOrderCalculator.php"}),"https://github.com/doctrine/orm/blob/master/lib/Doctrine/ORM/Internal/CommitOrderCalculator.php")),Object(c.b)("h2",{id:"hierarchy"},"Hierarchy"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"CommitOrderCalculator"))),Object(c.b)("h2",{id:"properties"},"Properties"),Object(c.b)("h3",{id:"nodes"},"nodes"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("inlineCode",{parentName:"p"},"Private")," ",Object(c.b)("strong",{parentName:"p"},"nodes"),": ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/next/api#dictionary"}),"Dictionary"),"<",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/next/api/interfaces/node"}),"Node"),">"),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/mikro-orm/mikro-orm/blob/c5da9c6/packages/core/src/unit-of-work/CommitOrderCalculator.ts#L33"}),"packages/core/src/unit-of-work/CommitOrderCalculator.ts:33"))),Object(c.b)("p",null,"Matrix of nodes, keys are provided hashes and values are the node definition objects."),Object(c.b)("hr",null),Object(c.b)("h3",{id:"sortednodelist"},"sortedNodeList"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("inlineCode",{parentName:"p"},"Private")," ",Object(c.b)("strong",{parentName:"p"},"sortedNodeList"),": string[] = []"),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/mikro-orm/mikro-orm/blob/c5da9c6/packages/core/src/unit-of-work/CommitOrderCalculator.ts#L36"}),"packages/core/src/unit-of-work/CommitOrderCalculator.ts:36"))),Object(c.b)("p",null,"Volatile variable holding calculated nodes during sorting process."),Object(c.b)("h2",{id:"methods"},"Methods"),Object(c.b)("h3",{id:"adddependency"},"addDependency"),Object(c.b)("p",null,"\u25b8 ",Object(c.b)("strong",{parentName:"p"},"addDependency"),"(",Object(c.b)("inlineCode",{parentName:"p"},"from"),": string, ",Object(c.b)("inlineCode",{parentName:"p"},"to"),": string, ",Object(c.b)("inlineCode",{parentName:"p"},"weight"),": number): void"),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/mikro-orm/mikro-orm/blob/c5da9c6/packages/core/src/unit-of-work/CommitOrderCalculator.ts#L55"}),"packages/core/src/unit-of-work/CommitOrderCalculator.ts:55"))),Object(c.b)("p",null,"Adds a new dependency (edge) to the graph using their hashes."),Object(c.b)("h4",{id:"parameters"},"Parameters:"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Type"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"from")),Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"string")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"to")),Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"string")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"weight")),Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"number")))),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns:")," void"),Object(c.b)("hr",null),Object(c.b)("h3",{id:"addnode"},"addNode"),Object(c.b)("p",null,"\u25b8 ",Object(c.b)("strong",{parentName:"p"},"addNode"),"(",Object(c.b)("inlineCode",{parentName:"p"},"hash"),": string): void"),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/mikro-orm/mikro-orm/blob/c5da9c6/packages/core/src/unit-of-work/CommitOrderCalculator.ts#L48"}),"packages/core/src/unit-of-work/CommitOrderCalculator.ts:48"))),Object(c.b)("p",null,"Adds a new node to the graph, assigning its hash."),Object(c.b)("h4",{id:"parameters-1"},"Parameters:"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Type"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"hash")),Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"string")))),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns:")," void"),Object(c.b)("hr",null),Object(c.b)("h3",{id:"hasnode"},"hasNode"),Object(c.b)("p",null,"\u25b8 ",Object(c.b)("strong",{parentName:"p"},"hasNode"),"(",Object(c.b)("inlineCode",{parentName:"p"},"hash"),": string): boolean"),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/mikro-orm/mikro-orm/blob/c5da9c6/packages/core/src/unit-of-work/CommitOrderCalculator.ts#L41"}),"packages/core/src/unit-of-work/CommitOrderCalculator.ts:41"))),Object(c.b)("p",null,"Checks for node existence in graph."),Object(c.b)("h4",{id:"parameters-2"},"Parameters:"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Type"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"hash")),Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"string")))),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns:")," boolean"),Object(c.b)("hr",null),Object(c.b)("h3",{id:"sort"},"sort"),Object(c.b)("p",null,"\u25b8 ",Object(c.b)("strong",{parentName:"p"},"sort"),"(): string[]"),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/mikro-orm/mikro-orm/blob/c5da9c6/packages/core/src/unit-of-work/CommitOrderCalculator.ts#L65"}),"packages/core/src/unit-of-work/CommitOrderCalculator.ts:65"))),Object(c.b)("p",null,"Return a valid order list of all current nodes.\nThe desired topological sorting is the reverse post order of these searches."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},Object(c.b)("inlineCode",{parentName:"strong"},"internal"))," Highly performance-sensitive method."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns:")," string[]"),Object(c.b)("hr",null),Object(c.b)("h3",{id:"visit"},"visit"),Object(c.b)("p",null,"\u25b8 ",Object(c.b)("inlineCode",{parentName:"p"},"Private"),Object(c.b)("strong",{parentName:"p"},"visit"),"(",Object(c.b)("inlineCode",{parentName:"p"},"node"),": ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/next/api/interfaces/node"}),"Node"),"): void"),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/mikro-orm/mikro-orm/blob/c5da9c6/packages/core/src/unit-of-work/CommitOrderCalculator.ts#L86"}),"packages/core/src/unit-of-work/CommitOrderCalculator.ts:86"))),Object(c.b)("p",null,"Visit a given node definition for reordering."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},Object(c.b)("inlineCode",{parentName:"strong"},"internal"))," Highly performance-sensitive method."),Object(c.b)("h4",{id:"parameters-3"},"Parameters:"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Type"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"node")),Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(c.b)("a",Object(r.a)({parentName:"td"},{href:"/docs/next/api/interfaces/node"}),"Node"))))),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns:")," void"),Object(c.b)("hr",null),Object(c.b)("h3",{id:"visitopennode"},"visitOpenNode"),Object(c.b)("p",null,"\u25b8 ",Object(c.b)("inlineCode",{parentName:"p"},"Private"),Object(c.b)("strong",{parentName:"p"},"visitOpenNode"),"(",Object(c.b)("inlineCode",{parentName:"p"},"node"),": ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/next/api/interfaces/node"}),"Node"),", ",Object(c.b)("inlineCode",{parentName:"p"},"target"),": ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/next/api/interfaces/node"}),"Node"),", ",Object(c.b)("inlineCode",{parentName:"p"},"edge"),": ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/next/api/interfaces/edge"}),"Edge"),"): void"),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Defined in ",Object(c.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/mikro-orm/mikro-orm/blob/c5da9c6/packages/core/src/unit-of-work/CommitOrderCalculator.ts#L108"}),"packages/core/src/unit-of-work/CommitOrderCalculator.ts:108"))),Object(c.b)("p",null,"Visits all target's dependencies if in cycle with given node"),Object(c.b)("h4",{id:"parameters-4"},"Parameters:"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Type"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"node")),Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(c.b)("a",Object(r.a)({parentName:"td"},{href:"/docs/next/api/interfaces/node"}),"Node"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"target")),Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(c.b)("a",Object(r.a)({parentName:"td"},{href:"/docs/next/api/interfaces/node"}),"Node"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"edge")),Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(c.b)("a",Object(r.a)({parentName:"td"},{href:"/docs/next/api/interfaces/edge"}),"Edge"))))),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns:")," void"))}d.isMDXComponent=!0},803:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return O}));var r=a(0),n=a.n(r);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function b(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?b(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):b(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},c=Object.keys(e);for(r=0;r<c.length;r++)a=c[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)a=c[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=n.a.createContext({}),d=function(e){var t=n.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=d(e.components);return n.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},s=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,c=e.originalType,b=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=d(a),s=r,O=p["".concat(b,".").concat(s)]||p[s]||m[s]||c;return a?n.a.createElement(O,o(o({ref:t},l),{},{components:a})):n.a.createElement(O,o({ref:t},l))}));function O(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=a.length,b=new Array(c);b[0]=s;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,b[1]=o;for(var l=2;l<c;l++)b[l]=a[l];return n.a.createElement.apply(null,b)}return n.a.createElement.apply(null,a)}s.displayName="MDXCreateElement"}}]);